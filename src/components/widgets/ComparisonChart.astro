---
// Here we import necessary components and utilities

import WidgetWrapper from '~/components/ui/WidgetWrapper.astro'; // WidgetWrapper component for wrapping the entire widget
import Headline from '~/components/ui/Headline.astro'; // Headline component for displaying titles and taglines
import Button from '../ui/Button.astro';

// Destructuring props with default values and slot content
const {
  title = await Astro.slots.render('title'), // Title of the widget
  subtitle = await Astro.slots.render('subtitle'), // Subtitle of the widget
  tagline = await Astro.slots.render('tagline'), // Tagline of the widget
  benefits = [],
  providers = {},
  id, // Unique identifier for the widget
  isDark = false, // Dark mode flag (default: false)
  classes = {}, // Custom classes for styling
  bg = await Astro.slots.render('bg'), // Background color of the widget
} = Astro.props; // Props passed to the widget component

// mainTitle description callToAction values
---

<WidgetWrapper id={id} isDark={isDark} containerClass={`max-w-7xl mx-auto ${classes?.container ?? ''}`} bg={bg}>
  <Headline title={title} subtitle={subtitle} tagline={tagline} classes={classes?.headline as Record<string, string>} />

  <div class="text-gray-700 body-font overflow-hidden">
    <div class="container px-5 py-8 mx-auto flex flex-wrap">
      <div class="lg:w-1/4 mt-48 hidden lg:block">
        <div class="mt-px rounded-tl-lg rounded-bl-lg overflow-hidden">
          {
            benefits.map((benefit, index) => (
              <div
                key={index}
                class={`${index % 2 === 0 ? 'bg-gray-100 dark:bg-white/[.099]' : 'bg-white dark:bg-[#8bdc180a]'} flex justify-between`}
              >
                <p class={`text-muted h-12 text-center px-4 flex items-center justify-start dark:text-white`}>
                  {benefit}
                </p>
              </div>
            ))
          }
        </div>
      </div>

      <div class="flex lg:w-3/4 w-full flex-wrap rounded-lg">
        {
          providers.map((provider, index) => (
            <div
              key={index}
              class={`lg:w-1/3 lg:-mt-px w-full mb-10  lg:mb-0 border-2   ${provider.popular ? 'rounded-lg border-primary relative' : 'border-gray-300 lg:border-none rounded-lg lg:rounded-none'}`}
            >
              {provider.popular && (
                <span class="bg-primary text-[--aw-color-bg-page]  px-3 py-1 tracking-widest text-xs absolute right-0 top-0 rounded-bl">
                  POPULAR
                </span>
              )}

              <div class="px-2 text-center h-48 flex flex-col items-center justify-center">
                <h3 class="tracking-widest">{provider.subtitle}</h3>
                <h2 class="text-3xl text-default font-medium leading-none mb-4 mt-2">{provider.mainTitle}</h2>
                <span class="text-sm text-muted">{provider.description} </span>
              </div>

              {provider.values.map((benefit, index) => (
                <div
                  key={index}
                  class={`${index % 2 === 0 ? 'bg-gray-100 dark:bg-white/[.099]' : 'bg-white dark:bg-[#8bdc180a]'} flex justify-center `}
                >
                  <p class={`text-muted h-12 text-center px-4 flex items-center justify-start dark:text-white`}>
                    {benefit === 'cross' && (
                      <svg
                        fill="none"
                        stroke="currentColor"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2.2"
                        class="w-5 h-5 text-red-600"
                        viewBox="0 0 24 24"
                      >
                        <path d="M18 6L6 18M6 6l12 12" />
                      </svg>
                    )}

                    {benefit === 'tick' && (
                      <span class="w-5 h-5 inline-flex items-center justify-center bg-primary text-[--aw-color-bg-page]  rounded-full flex-shrink-0">
                        <svg
                          fill="none"
                          stroke="currentColor"
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="3"
                          class="w-3 h-3"
                          viewBox="0 0 24 24"
                        >
                          <path d="M20 6L9 17l-5-5" />
                        </svg>
                      </span>
                    )}

                    {benefit !== 'cross' && benefit !== 'tick' && <span class="text-default">{benefit}</span>}
                  </p>
                </div>
              ))}

              {provider.popular && (
                <div class=" p-6 text-center rounded-bl-lg flex justify-center">
                  {provider.callToAction && (
                    <div class=" flex justify-center">
                      {Array.isArray(provider.callToAction) ? (
                        provider.callToAction.map((action, idx) => (
                          <div key={idx} class="flex w-full sm:w-auto">
                            <Button {...(action || {})} />
                          </div>
                        ))
                      ) : (
                        <div set:html={provider.callToAction} />
                      )}
                    </div>
                  )}
                  <p class="text-xs text-gray-500 mt-3">{provider.btnText}</p>
                </div>
              )}
            </div>
          ))
        }
      </div>
    </div>
  </div>
</WidgetWrapper>
