---
import Image from '~/components/common/Image.astro';
import type { CallToAction } from '~/types';
import Button from '~/components/ui/Button.astro';
import { Debug } from 'astro:components';

export interface Props {
  title?: string;
  subtitle?: string;
  tagline?: string;
  content?: string;
  actions?: string | CallToAction[];
  image?: string | any; // TODO: find HTMLElementProps
}

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline,
  content = await Astro.slots.render('content'),
  actions = await Astro.slots.render('actions'),
  image = await Astro.slots.render('image'),
  imageArray = [],
} = Astro.props;
---

<section class="relative md:-mt-[76px] not-prose">
  
  <div class="relative max-w-7xl mx-auto px-4 sm:px-6 py-[76px]" >
    
    <div class="py-12 md:py-20 lg:py-0 lg:flex lg:items-center lg:h-screen lg:gap-8">
      <div class="basis-1/2 text-center lg:text-left pb-10 md:pb-16 mx-auto">
        {
          tagline && (
            <p
              class="text-base text-primary dark:text-[primary] font-bold tracking-wide uppercase"
              set:html={tagline}
            />
          )
        }
        {
          title && (
            <h1
              class="text-5xl md:text-6xl font-bold leading-tighter tracking-tighter mb-4 font-heading dark:text-gray-200"
              set:html={title}
            />
          )
        }
        <div class="max-w-3xl mx-auto lg:max-w-none">
          {subtitle && <p class="text-xl text-muted mb-6 dark:text-slate-300" set:html={subtitle} />}

          {
            actions && (
              <div class="max-w-xs sm:max-w-md m-auto flex flex-nowrap flex-col sm:flex-row sm:justify-center gap-4 lg:justify-start lg:m-0 lg:max-w-7xl">
                {Array.isArray(actions) ? (
                  actions.map((action) => (
                    <div class="flex w-full sm:w-auto">
                      <Button {...(action || {})} class="w-full sm:mb-0" />
                    </div>
                  ))
                ) : (
                  <Fragment set:html={actions} />
                )}
              </div>
            )
          }
        </div>
        {content && <Fragment set:html={content} />}
      </div>
      <div class="basis-1/2">
        <div class="swiper max-w-xl">
            
          <div class="swiper-wrapper ">
            {
                imageArray.map((item, index) => {
                    
                  const image = item.image; // Destructure the image object for clarity
                  return (
                    <div key={index} class="swiper-slide ">
                      
                        {typeof image === 'string' ? (
                          // Render HTML string if `image` is a string
                          <Fragment set:html={image} />
                        ) : (
                          // Render optimized image if `image` is an object
                          <Image
                            class="mx-auto rounded-md w-full object-center-important "
                            widths={[400, 768, 1024, 2040]}
                            sizes="(max-width: 767px) 400px, (max-width: 1023px) 768px, (max-width: 2039px) 1024px, 2040px"
                            loading="eager"
                            width={600}
                            height={600}
                            src={image.src}
                            alt={image.alt || 'Case study image'} // Fallback alt text
                            {...image} // Spread remaining props (if any)
                          />
                          <div class="absolute inset-x-0 bottom-0 h-1/3 bg-gradient-to-t from-[--aw-color-bg-page] to-transparent rounded-b-md"></div>
                          )}
                    </div>
                    
                  );
                })
              }

           
          
        </div>
          <div class="swiper-pagination"></div>
          <div class="swiper-button-prev"></div>
        <div class="swiper-button-next"></div>
        </div>
        
      </div>
      
    </div>
  </div>
</section>
<style>
    :root {
  --aw-color-primary:#8bdc18; /* Replace with your primary color */
}

    .swiper-button-prev, .swiper-button-next {
      --swiper-button-bg: var(--aw-color-accent);
      --swiper-button-text: var(--aw-color-bg-page-dark);
      --swiper-button-padding: 2rem;
      --swiper-button-radius: 2rem;
      --swiper-button-scale: 0.8;
  
      background: var(--swiper-button-bg);
      color: var(--swiper-button-text);
      padding: var(--swiper-button-padding);
      border-radius: var(--swiper-button-radius);
      transition: background 0.3s ease, color 0.3s ease; /* Smooth transitions */
      scale: var(--swiper-button-scale);
    }
  
    /* Hover and Focus States */
    .swiper-button-prev:hover, .swiper-button-next:hover,
    .swiper-button-prev:focus .swiper-button-next:focus{
      background: color-mix(in srgb, var(--swiper-button-bg), black 10%);
      color: color-mix(in srgb, var(--swiper-button-text), white 10%);
    }
  
    /* Active State */
    .swiper-button-prev:active .swiper-button-next:active {
      background: color-mix(in srgb, var(--swiper-button-bg), black 20%);
      color: color-mix(in srgb, var(--swiper-button-text), white 20%);
    }
  
    .swiper-button-prev{
        left:5%;
        top: 90%;
    }
    .swiper-button-next{
        left: 15%;
        top: 90%;
    }
    .swiper-pagination-bullet {
    background-color: var(--aw-color-primary);
    opacity: 0.5;
    width: 12px;
    height: 12px;
    margin: 0 8px;
    transition: opacity 0.3s ease, background-color 0.3s ease;
  }

  /* Active pagination bullet style */
  .swiper-pagination-bullet-active {
    opacity: 1;
    background: var(--aw-color-primary);
  }

  /* Hover effect for pagination bullets */
  .swiper-pagination-bullet:hover {
    opacity: 0.8;
  }

    /* Responsive Adjustments */
    @media (max-width: 768px) {
        .swiper-button-prev, .swiper-button-next  {
            scale: 0.6;
      }
    }
  </style>