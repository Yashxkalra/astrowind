---
import Image from '~/components/common/Image.astro';
import type { CallToAction } from '~/types';
import Button from '~/components/ui/Button.astro';
import { Debug } from 'astro:components';

export interface Props {
  title?: string;
  subtitle?: string;
  tagline?: string;
  content?: string;
  actions?: string | CallToAction[];
  image?: string | any; // TODO: find HTMLElementProps
}

const {
  title = Astro.slots.has('title') ? Astro.slots.render('title') : null,
  subtitle = Astro.slots.has('subtitle') ? Astro.slots.render('subtitle') : null,
  tagline,
  content = Astro.slots.has('content') ? Astro.slots.render('content') : null,
  actions = Astro.slots.has('actions') ? Astro.slots.render('actions') : null,
  image = Astro.slots.has('image') ? Astro.slots.render('image') : null,
  imageArray = [],
} = Astro.props;
---

<section class="relative md:-mt-[76px] not-prose">
  
  <div class="relative max-w-7xl mx-auto px-4 sm:px-6 py-[76px]" >
    
    <div class="py-12 md:py-20 lg:py-0 lg:flex lg:items-center lg:h-screen lg:gap-8">
      <div class="basis-1/2 text-center lg:text-left pb-10 md:pb-16 mx-auto">
        {
          tagline && (
            <p
              class="text-base text-primary dark:text-[primary] font-bold tracking-wide uppercase"
              set:html={tagline}
            />
          )
        }
        {
          title && (
            <h1
              class="text-5xl md:text-6xl font-bold leading-tighter tracking-tighter mb-4 font-heading dark:text-gray-200"
              set:html={title}
            />
          )
        }
        <div class="max-w-3xl mx-auto lg:max-w-none">
          {subtitle && <p class="text-xl text-muted mb-6 dark:text-slate-300" set:html={subtitle} />}

          {
            actions && (
              <div class="max-w-xs sm:max-w-md m-auto flex flex-nowrap flex-col sm:flex-row sm:justify-center gap-4 lg:justify-start lg:m-0 lg:max-w-7xl">
                {Array.isArray(actions) ? (
                  actions.map((action) => (
                    <div class="flex w-full sm:w-auto">
                      <Button {...(action || {})} class="w-full sm:mb-0" />
                    </div>
                  ))
                ) : (
                  <Fragment set:html={actions} />
                )}
              </div>
            )
          }
        </div>
        {content && <Fragment set:html={content} />}
      </div>
      <div class="basis-1/2">
        <div class="swiper max-w-xl">
            
          <div class="swiper-wrapper ">
            {
                imageArray.map((item, index) => {
                    
                  const image = item.image; // Destructure the image object for clarity
                  return (
                    <div key={index} class="swiper-slide relative">
                      <svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 131 132" class="absolute z-10 scale-[0.5] top-60% left-0" fill="var(--aw-color-primary)">
<path d="M110 68C111 80 97.5 110.5 66.5 110.5C37.5 108.5 23.5 83.1667 23 68M66.4312 111.498L66.4656 111.5H66.5C82.3698 111.5 93.7653 103.68 101.038 94.3654C104.671 89.7131 107.284 84.6794 108.927 80.0368C110.565 75.4101 111.262 71.1056 110.997 67.917L109.003 68.083C109.238 70.8944 108.623 74.9024 107.042 79.3695C105.466 83.8206 102.954 88.6619 99.4618 93.1346C92.49 102.063 81.6467 109.489 66.5344 109.5C52.3543 108.512 41.8555 101.834 34.8253 93.5409C27.7684 85.2158 24.2413 75.3025 23.9995 67.967L22.0005 68.033C22.2587 75.8641 25.9816 86.2009 33.2997 94.8341C40.6389 103.492 51.6287 110.477 66.4312 111.498ZM130 66C130 101.622 101.122 130.5 65.5 130.5C29.8776 130.5 1 101.622 1 66C1 30.3776 29.8776 1.5 65.5 1.5C101.122 1.5 130 30.3776 130 66Z" fill="var(--aw-color-primary)" stroke="black" stroke-width="2"/>
<path d="M18 67C21.5 68.5 25.5 68.5 29 66.5" stroke="#000" stroke-width="2"/>
<path d="M104.121 66.5167C107.568 68.4635 111.702 68.9167 115.546 67.2463" stroke="#000" stroke-width="2.03853"/>
<ellipse cx="50.5" cy="45" rx="6.5" ry="15" fill="#000"/>
<ellipse cx="83.5" cy="45" rx="6.5" ry="15" fill="#000"/>
</svg>
                        {typeof image === 'string' ? (
                          // Render HTML string if `image` is a string
                          <Fragment set:html={image} />
                        ) : (
                          // Render optimized image if `image` is an object
                          <Image
                            class="mx-auto rounded-md w-full object-center-important "
                            widths={[400, 768, 1024, 2040]}
                            sizes="(max-width: 767px) 400px, (max-width: 1023px) 768px, (max-width: 2039px) 1024px, 2040px"
                            loading="eager"
                            width={600}
                            height={600}
                            src={image.src}
                            alt={image.alt || 'Case study image'} // Fallback alt text
                            {...image} // Spread remaining props (if any)
                          />
                          <div class="absolute inset-x-0 bottom-0 h-1/3 bg-gradient-to-t from-[--aw-color-bg-page] to-transparent rounded-b-md"></div>
                          )}
                    </div>
                    
                  );
                })
              }

           
          
        </div>
          <div class="swiper-pagination"></div>
          <div class="swiper-button-prev"></div>
        <div class="swiper-button-next"></div>
        </div>
        
      </div>
      
    </div>
  </div>
</section>
<style>
    
    .swiper-button-prev, .swiper-button-next {
      --swiper-button-bg: var(--aw-color-accent);
      --swiper-button-text: var(--aw-color-bg-page-dark);
      --swiper-button-padding: 2rem;
      --swiper-button-radius: 2rem;
      --swiper-button-scale: 0.8;
  
      background: var(--swiper-button-bg);
      color: var(--swiper-button-text);
      padding: var(--swiper-button-padding);
      border-radius: var(--swiper-button-radius);
      transition: background 0.3s ease, color 0.3s ease; /* Smooth transitions */
      scale: var(--swiper-button-scale);
    }
  
    /* Hover and Focus States */
    .swiper-button-prev:hover, .swiper-button-next:hover,
    .swiper-button-prev:focus .swiper-button-next:focus{
      background: color-mix(in srgb, var(--swiper-button-bg), black 10%);
      color: color-mix(in srgb, var(--swiper-button-text), white 10%);
    }
  
    /* Active State */
    .swiper-button-prev:active .swiper-button-next:active {
      background: color-mix(in srgb, var(--swiper-button-bg), black 20%);
      color: color-mix(in srgb, var(--swiper-button-text), white 20%);
    }
  
    .swiper-button-prev{
        left:5%;
        top: 90%;
    }
    .swiper-button-next{
        left: 15%;
        top: 90%;
    }
    .swiper-pagination-bullet {
    background-color: var(--aw-color-primary);
    opacity: 0.5;
    width: 12px;
    height: 12px;
    margin: 0 8px;
    transition: opacity 0.3s ease, background-color 0.3s ease;
  }

  /* Active pagination bullet style */
  .swiper-pagination-bullet-active {
    opacity: 1;
    background: var(--aw-color-primary);
  }

  /* Hover effect for pagination bullets */
  .swiper-pagination-bullet:hover {
    opacity: 0.8;
  }

    /* Responsive Adjustments */
    @media (max-width: 600px) {
        .swiper-button-prev, .swiper-button-next  {
            scale: 0.6;
      }
      .swiper-button-prev{
        left:2%;
        top: 86%;
    }
    .swiper-button-next{
        left: 15%;
        top: 86%;
    }
    }
  </style>